#include <allegro5/allegro.h>
#include<allegro5/allegro_primitives.h>
#include<allegro5/allegro_image.h>

//constants: variables that shouldn't change once the game starts
const float FPS = 60;
const int SCREEN_W = 1000;
const int SCREEN_H = 1000;

//enumeration to help you remember what numbers represent which directions
enum MYKEYS {
	KEY_UP, KEY_DOWN, KEY_W, KEY_S
};
////function declaration
bool collide(int bx, int by, int bw, int bh, int px, int py, int pw, int ph);

int main()
{
	///////////////////////////////////needed for all games!////////////////
	al_init();
	al_install_keyboard();
	al_init_primitives_addon();

	//set up game screen, event queue, and timer
	ALLEGRO_DISPLAY* display = al_create_display(SCREEN_W, SCREEN_H);
	ALLEGRO_BITMAP* player = al_load_bitmap("piskel.png");
	ALLEGRO_EVENT_QUEUE* event_queue = al_create_event_queue();
	ALLEGRO_TIMER* timer = al_create_timer(1.0 / 60);


	//tell the event queue what to listen for
	al_register_event_source(event_queue, al_get_display_event_source(display));
	al_register_event_source(event_queue, al_get_timer_event_source(timer));
	al_register_event_source(event_queue, al_get_keyboard_event_source());
	al_start_timer(timer);

	//////////////////////////////////////////////////////////////////////////////

	//paddle 1 starting position
	double xPos = 950;
	double yPos = 700;
	//paddle2
	double xPos1 = 50;
	double yPos1 = 700;

	//game variables
	bool key[4] = { false, false, false, false }; //holds key clicks
	bool redraw = true; //variable needed for render section
	bool doexit = false;

	//ball starting position
	float ball_x = 20;
	float ball_y = 200;

	

	//ball speed
	float ball_dx = 4.0, ball_dy = 4.0;



	while (1) {
		ALLEGRO_EVENT ev;
		al_wait_for_event(event_queue, &ev);

		//TIMER  (handles physics)
		//collisions with wall
		if (ev.type == ALLEGRO_EVENT_TIMER) {

			//MOVE
			ball_x += ball_dx;
			ball_y += ball_dy;

			if (ball_x < 0 || ball_x > 1000) { //bounces against side walls
				ball_dx = -ball_dx;
			}

			if (ball_y > 0 || ball_y > 1000) { //bounce against top and bottom walls
				ball_dy = -ball_dy;
			}
			
			//collision with paddles
			if (collide(ball_x, ball_y, 20, 30, xPos, yPos, 60, 80))
				ball_dx = - ball_dx;
			//repeat for other paddle
			if (collide(ball_x, ball_y, 20, 30, xPos1, yPos1, 50, 90))
				ball_dx = - ball_dx;


		

			//move player 4 pixels in a direction when key is pressed
			if (key[KEY_UP]) {
				yPos -= 6.0;
			}
			if (key[KEY_DOWN]) {
				yPos += 6.0;
			}
			//add w and s
			if (key[KEY_W]) {
				yPos1 -= 6.0;
			}
			if (key[KEY_S]) {
				yPos1 += 6.0;
			}
			redraw = true;
		}
		////lets you close with the x button
		else if (ev.type == ALLEGRO_EVENT_DISPLAY_CLOSE) {
			break;
		}
		else if (ev.type == ALLEGRO_EVENT_KEY_DOWN) {
			switch (ev.keyboard.keycode) {
			case ALLEGRO_KEY_UP:
				key[KEY_UP] = true;
				break;
			case ALLEGRO_KEY_DOWN:
				key[KEY_DOWN] = true;
				break;

				//add w and s
			case ALLEGRO_KEY_W:
				key[KEY_W] = true;
				break;
			case ALLEGRO_KEY_S:
				key[KEY_S] = true;
				break;
			}
		}
		else if (ev.type == ALLEGRO_EVENT_KEY_UP) {
			switch (ev.keyboard.keycode) {
			case ALLEGRO_KEY_UP:
				key[KEY_UP] = false;
				break;
			case ALLEGRO_KEY_DOWN:
				key[KEY_DOWN] = false;
				break;
			case ALLEGRO_KEY_W:
				key[KEY_W] = false;
				break;
			case ALLEGRO_KEY_S:
				key[KEY_S] = false;
				break;
			}
		}

	

		//RENDER SECTION
		if (redraw && al_is_event_queue_empty(event_queue)) {
			redraw = true;

			al_clear_to_color(al_map_rgb(0, 0, 0)); //clears the screen

			al_draw_filled_circle(ball_x, ball_y, 20, al_map_rgb(200, 200, 100));
		
			al_draw_rectangle(xPos, yPos, xPos+10, yPos + 80, al_map_rgb(50, 120, 10), 20); //draw the player
			al_draw_rectangle(xPos1, yPos1, xPos1+10, yPos1 + 80, al_map_rgb(50, 120, 10), 20); //draw the player
			al_flip_display();

		}

	}//end game loop


	al_destroy_timer(timer);
	al_destroy_display(display);
	al_destroy_event_queue(event_queue);

	return 0;
}

////function definitions
bool collide(int bx, int by, int bw, int bh, int px, int py, int pw, int ph) {
	if ((bx + bw > px) &&  //did the right edge of the ball hit the 
		(bx > px + pw) &&//did the left edge of the ball
		(by + bh > py) &&
		(by < py + ph))
		return true;
	else
		return false;


}
